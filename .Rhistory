year=as.character(year),
month=format(date,"%m"),
geom=counties)
cat("complete.")
# ------------------ Perform pixel analysis on WUSTL raster ------------------
# Convert raster to data frame of points and determine which county each point (pixel) is in
cat("\n", format(date,"%B %Y"),": Converting WUSTL raster to points & determining county of each point...")
wustl_results <- wuslt_raster_analysis(wustl_raster=wustl_raster, counties=counties)
cat("complete.")
# ------------------ Perform land type analysis ------------------
# Pixel ID is assigned by looping through each polygon
# See the function cov_frac_df for more details on the code
cat("\n", format(date,"%B %Y"),": Computing fraction land use type in each WUSTL pixel...")
crop_results <- crop_extraction_wustl_polys(wustl_raster=wustl_raster, cropscape_raster=cropscape_raster)
cat("complete.")
# ------------------ Combine results and save as csv file ------------------
# Combine results
cat("\n", format(date,"%B %Y"),": Combining WUSTL and cropscape analyses...")
results_all <- left_join(wustl_results, crop_results, on=c("pixel_ID","SOIL")) %>%
dplyr::rename("dust(ug/m3)" = SOIL) # Rename column
# Save data frame as csv
output_filepath = paste0(OUTPUT_DIR,"/",format(date, "%Y%m"),".csv")
cat("\n", format(date,"%B %Y"),": Saving results as a csv file to ", output_filepath, "...")
write.csv(results_all, output_filepath, row.names=FALSE)
cat("\n", format(date,"%B %Y"),": COMPLETED ANALYSIS. Total time elapsed:", time_elapsed_pretty(start.time.month, Sys.time()), "\n")
}, year=year, cropscape_raster=cropscape_raster, WUSTL_FOLDER=WUSTL_FOLDER, counties=counties)
cat("Completed analysis for", year, "\nTotal time elapsed:", time_elapsed_pretty(start.time, Sys.time()))
stopCluster(cl)
ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE'))
ncores
if is.nan(ncores) { print("nicole")}
if (is.nan(ncores)) { print("nicole")}
ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE'))
if (is.nan(ncores)) { print("nicole")}
ncores
if (ncores == NA) { print("nicole")}
(ncores == NA)
is.na(ncores)
if (is.na(ncores)) { print("nicole")}
library(tidyverse)
library(ncdf4)
library(raster)
library(sf)
library(lubridate)
library(exactextractr)
library(plyr)
library(dplyr)
library(parallel)
source("utils.R")
# Set locations to data
WUSTL_FOLDER <- "data/SOIL" # Path to WUSTL data
CROPSCAPE_FOLDER <- "data/cropscape" # Path to folder containing cropscape rasters
SHAPEFILE_PATH <- "data/CA_Counties" # Path to counties shapefile
OUTPUT_DIR <- "data/results"
year <- 2016 # Year to run analysis for
months <- 1:2 # Months to run analysis for
# Check that paths exist
dir.create(OUTPUT_DIR, showWarnings=FALSE)
lapply(c(WUSTL_FOLDER, CROPSCAPE_FOLDER, SHAPEFILE_PATH, OUTPUT_DIR), check_path)
# Loop through each year and perform analysis
cat("Starting analysis for", year,"...")
start.time = Sys.time()
outfile <- "log.txt"
unlink(outfile)
sf::read_sf(SHAPEFILE_PATH)
sf::read_sf(SHAPEFILE_PATH) %>% st_set_crs("WGS84")
sf::read_sf(SHAPEFILE_PATH)
sf::read_sf(SHAPEFILE_PATH)$geometry
sf::read_sf(SHAPEFILE_PATH) %>% st_set_crs("EPSG:3857")
shp <- sf::read_sf(SHAPEFILE_PATH)
shp$geometry <- shp$geometry %>% st_set_crs("EPSG:3857")
shp <- sf::read_sf(SHAPEFILE_PATH)
shp$geometry <- shp$geometry %>% st_set_crs("EPSG:3857")
shp
shp$geometry
library(tidyverse)
library(ncdf4)
library(raster)
library(sf)
library(lubridate)
library(exactextractr)
library(plyr)
library(dplyr)
library(parallel)
source("utils.R")
# Set locations to data
WUSTL_FOLDER <- "data/SOIL" # Path to WUSTL data
CROPSCAPE_FOLDER <- "data/cropscape" # Path to folder containing cropscape rasters
SHAPEFILE_PATH <- "data/CA_Counties" # Path to counties shapefile
OUTPUT_DIR <- "data/results"
year <- 2016 # Year to run analysis for
months <- 1:2 # Months to run analysis for
ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE'))
if (is.na(ncores)) { ncores <- 4 }
ncores
# ------------------ Make cluster & run analysis ------------------
help(makeCluster)
outfile <- "log.txt"
unlink(outfile)
cat("complete.", file = "log.txt", append = TRUE)
# Loop through each year and perform analysis
cat("Starting analysis for", year,"...", file = "log.txt", append = TRUE))
# Loop through each year and perform analysis
cat("Starting analysis for", year,"...", file = "log.txt", append = TRUE)
# Create outfile for storing info about code
outfile <- "log.txt"
unlink(outfile) # Remove file if it already exists
# Check that paths exist
dir.create(OUTPUT_DIR, showWarnings=FALSE)
lapply(c(WUSTL_FOLDER, CROPSCAPE_FOLDER, SHAPEFILE_PATH, OUTPUT_DIR), check_path)
# Loop through each year and perform analysis
cat("Starting analysis for", year,"...", file = "log.txt", append = TRUE)
start.time = Sys.time()
# Read in cropscape raster & shapefile
cat("\nReading in cropscape raster & central valley shapefile (time invariant)...", file = "log.txt", append = TRUE)
library(tidyverse)
library(ncdf4)
library(raster)
library(sf)
library(lubridate)
library(exactextractr)
library(plyr)
library(dplyr)
library(parallel)
source("utils.R")
# Set locations to data
WUSTL_FOLDER <- "data/SOIL" # Path to WUSTL data
CROPSCAPE_FOLDER <- "data/cropscape" # Path to folder containing cropscape rasters
SHAPEFILE_PATH <- "data/CA_Counties" # Path to counties shapefile
OUTPUT_DIR <- "data/results"
year <- 2016 # Year to run analysis for
months <- 1:2 # Months to run analysis for
# Create outfile for storing info about code
outfile <- "log.txt"
unlink(outfile) # Remove file if it already exists
cat("Created outfile", outfile, file = "log.txt", append = TRUE)
# Check that paths exist
dir.create(OUTPUT_DIR, showWarnings=FALSE)
lapply(c(WUSTL_FOLDER, CROPSCAPE_FOLDER, SHAPEFILE_PATH, OUTPUT_DIR), check_path)
# Loop through each year and perform analysis
cat("Starting analysis for", year,"...", file = "log.txt", append = TRUE)
start.time = Sys.time()
# Read in cropscape raster & shapefile
cat("\nReading in cropscape raster & central valley shapefile (time invariant)...", file = "log.txt", append = TRUE)
counties <- read_centralValley(SHAPEFILE_PATH) # Read in shapefile of Central Valley counties of interest
cropscape_raster <- read_cropscape(CROPSCAPE_FOLDER=CROPSCAPE_FOLDER, # Read in CropScape raster
year=as.character(year),
geom=counties)
cat("complete.", file = "log.txt", append = TRUE)
# ------------------ Make cluster & run analysis ------------------
help(makeCluster)
ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE'))
if (is.na(ncores)) { ncores <- 4 }
cl <- makeCluster(ncores, outfile=outfile)
cat("\nMade cluster with", ncores,"cores.", file = "log.txt", append = TRUE)
# Load desired packages into each cluster
clusterEvalQ(cl, c(library(ncdf4),
library(tidyverse),
library(raster),
library(sf),
library(lubridate),
library(exactextractr),
library(plyr),
library(dplyr),
source("utils.R")))
help(clusterEvalQ)
# Load desired packages into each cluster
clusterEvalQ(cl, c(library(ncdf4),
library(tidyverse),
library(raster),
library(sf),
library(lubridate),
library(exactextractr),
library(plyr),
library(dplyr),
source("utils.R")), return = FALSE)
# Load desired packages into each cluster
invisible(clusterEvalQ(cl, c(library(ncdf4),
library(tidyverse),
library(raster),
library(sf),
library(lubridate),
library(exactextractr),
library(plyr),
library(dplyr),
source("utils.R"))))
help(clusterEvalQ)
clusterExport(cl=cl, varlist=c("WUSTL_FOLDER","counties", "OUTPUT_DIR","cropscape_raster"), envir=environment())
parSapply(cl, months, FUN=function(month, year, cropscape_raster, WUSTL_FOLDER, counties) {
start.time.month = Sys.time()
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
cat("\n", format(date,"%B %Y"),": Starting analysis...")
# ------------------ Read in WUSTL raster ------------------
cat("\n", format(date,"%B %Y"),": Reading in WUSTL raster...")
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
cat("complete.")
# ------------------ Perform pixel analysis on WUSTL raster ------------------
# Convert raster to data frame of points and determine which county each point (pixel) is in
cat("\n", format(date,"%B %Y"),": Converting WUSTL raster to points & determining county of each point...")
wustl_results <- wuslt_raster_analysis(wustl_raster=wustl_raster, counties=counties)
cat("complete.")
# ------------------ Perform land type analysis ------------------
# Pixel ID is assigned by looping through each polygon
# See the function cov_frac_df for more details on the code
cat("\n", format(date,"%B %Y"),": Computing fraction land use type in each WUSTL pixel...")
crop_results <- crop_extraction_wustl_polys(wustl_raster=wustl_raster, cropscape_raster=cropscape_raster)
cat("complete.")
# ------------------ Combine results and save as csv file ------------------
# Combine results
cat("\n", format(date,"%B %Y"),": Combining WUSTL and cropscape analyses...")
results_all <- left_join(wustl_results, crop_results, on=c("pixel_ID","SOIL")) %>%
dplyr::rename("dust(ug/m3)" = SOIL) # Rename column
# Save data frame as csv
output_filepath = paste0(OUTPUT_DIR,"/",format(date, "%Y%m"),".csv")
cat("\n", format(date,"%B %Y"),": Saving results as a csv file to ", output_filepath, "...")
write.csv(results_all, output_filepath, row.names=FALSE)
cat("\n", format(date,"%B %Y"),": COMPLETED ANALYSIS. Total time elapsed:", time_elapsed_pretty(start.time.month, Sys.time()), "\n")
}, year=year, cropscape_raster=cropscape_raster, WUSTL_FOLDER=WUSTL_FOLDER, counties=counties)
sessionInfo()
sessionInfo()
R.version()
R.Version()
sessionInfo()
conda_export(
envname="r_env")
library(reticulate)
conda_export(
envname="r_env")
reticulate::conda_export(
envname="r_env")
library(rstudio)
help(exactextractr::exact_extract)
help(exact_extract)
DATA_DIR <- "data/results/"
year <- 2016
mon <- 3
FILEPATH <- paste0(DATA_DIR,str(year),str(mon),".csv")
FILEPATH <- paste0(DATA_DIR,as.character(year),as.character(mon),".csv")
check_path(FILEPATH)
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
year <- 2016
mon <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
year <- 2016
mon <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
library(tidyverse)
DATA_DIR <- "data/results/"
year <- 2016
mon <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
paste0(as.character(year),"-", as.character(month),"-01")
month <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
date
format(date,"%Y%m")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv")
check_path(FILEPATH)
library(tidyverse)
DATA_DIR <- "data/results/"
year <- 2016
month <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv")
check_path(FILEPATH)
x <- check_path(FILEPATH)
x
source("utils.R")
DATA_DIR <- "data/results/"
year <- 2016
month <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv")
x <- check_path(FILEPATH)
source("utils.R")
DATA_DIR <- "data/results/"
year <- 2016
month <- 3
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv")
x <- check_path(FILEPATH)
x
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv") %>% check_path
source('~/code/dust_landuse_analysis/dust_analysis.R')
# Set locations to data
WUSTL_FOLDER <- "data/SOIL" %>% check_path # Path to WUSTL data
CROPSCAPE_FOLDER <- "data/cropscape" %>% check_path # Path to folder containing cropscape rasters
SHAPEFILE_PATH <- "data/CA_Counties" %>% check_path # Path to counties shapefile
read_csv(FILEPATh)
read_csv(FILEPATH)
df <- read_csv(FILEPATH)
View(df)
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
library(tidyverse)
library(ncdf4)
library(raster)
library(sf)
library(lubridate)
library(exactextractr)
library(plyr)
library(dplyr)
library(parallel)
source("utils.R") # Helper functions
year <- 2016 # Year to run analysis for
months <- 1:12 # Months to run analysis for
# Set locations to data and check that paths exits
WUSTL_FOLDER <- paste("data/SOIL",as.character(year),sep="/") %>% check_path # Path to WUSTL data
# ------------------ Define filepaths, create outfile & output directory  ------------------
WUSTL_FOLDER
source('~/code/dust_landuse_analysis/dust_analysis.R')
# Set locations to data and check that paths exits
WUSTL_FOLDER <- paste("data/SOIL", as.character(year), sep="/") %>% check_path # Path to WUSTL data
CROPSCAPE_FOLDER <- "data/cropscape" %>% check_path # Path to folder containing cropscape rasters
SHAPEFILE_PATH <- "data/CA_Counties" %>% check_path # Path to counties shapefile
OUTPUT_DIR <- "data/results" %>% check_path
# Create outfile for storing info about code
outfile <- "log.txt"
unlink(outfile) # Remove file if it already exists
cat("Created outfile", outfile, file = outfile, append = TRUE)
# Create output directory
dir.create(OUTPUT_DIR, showWarnings=FALSE)
OUTPUT_DIR <- check_path(OUTPUT_DIR) # Check that path exists
# Start timer
cat("\nPerforming analysis for", year,"...", file = outfile, append = TRUE)
start.time = Sys.time()
# Read in cropscape raster & shapefile
cat("\nReading in cropscape raster & central valley shapefile (time invariant)...", file = outfile, append = TRUE)
counties <- read_centralValley(SHAPEFILE_PATH) # Read in shapefile of Central Valley counties of interest
cropscape_raster <- read_cropscape(CROPSCAPE_FOLDER=CROPSCAPE_FOLDER, # Read in CropScape raster
year=as.character(year),
geom=counties)
cat("complete.\n", file = outfile, append = TRUE)
# Make cluster
ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE')) # Detect number of cores. This should be set in Rscript.txt if running in savio
if (is.na(ncores)) { ncores <- 4 } # Set to 4 cores if no SLURM_CPUS_ON_NODE environment variable detected (i.e running on personal laptop)
cl <- makeCluster(ncores, outfile=outfile) # Make cluster using outfile defined earlier
cat("\nMade cluster with", ncores,"cores.", file = outfile, append = TRUE)
# Load desired packages into each cluster
invisible(clusterEvalQ(cl, c(library(ncdf4),
library(tidyverse),
library(raster),
library(sf),
library(lubridate),
library(exactextractr),
library(plyr),
library(dplyr),
source("utils.R"))))
# Export time-invariant variables to each cluster
clusterExport(cl=cl, varlist=c("WUSTL_FOLDER","counties", "OUTPUT_DIR","cropscape_raster"), envir=environment())
# Analysis is performed for each month in parallel using parSapply from R parallel package
parSapply(cl, months, FUN=function(month, year, cropscape_raster, WUSTL_FOLDER, counties) {
start.time.month = Sys.time()
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
cat("\n", format(date,"%B %Y"),": Starting analysis...")
# ------------------ Read in WUSTL raster ------------------
cat("\n", format(date,"%B %Y"),": Reading in WUSTL raster...")
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
cat("complete.")
# ------------------ Perform pixel analysis on WUSTL raster ------------------
# Convert raster to data frame of points and determine which county each point (pixel) is in
cat("\n", format(date,"%B %Y"),": Converting WUSTL raster to points & determining county of each point...")
wustl_results <- wuslt_raster_analysis(wustl_raster=wustl_raster, counties=counties)
cat("complete.")
# ------------------ Perform land type analysis ------------------
# Pixel ID is assigned by looping through each polygon
# See the function cov_frac_df for more details on the code
cat("\n", format(date,"%B %Y"),": Computing fraction land use type in each WUSTL pixel...")
crop_results <- crop_extraction_wustl_polys(wustl_raster=wustl_raster, cropscape_raster=cropscape_raster)
cat("complete.")
# ------------------ Combine results and save as csv file ------------------
# Combine results
cat("\n", format(date,"%B %Y"),": Combining WUSTL and cropscape analyses...")
results_all <- left_join(wustl_results, crop_results, on=c("pixel_ID","SOIL")) %>%
dplyr::rename("dust(ug/m3)" = SOIL) # Rename column
# Save data frame as csv
output_filepath = paste0(OUTPUT_DIR,"/",format(date, "%Y%m"),".csv")
cat("\n", format(date,"%B %Y"),": Saving results as a csv file to ", output_filepath, "...")
write.csv(results_all, output_filepath, row.names=FALSE)
cat("\n", format(date,"%B %Y"),": COMPLETED ANALYSIS. Total time elapsed:", time_elapsed_pretty(start.time.month, Sys.time()), "\n")
}, year=year, cropscape_raster=cropscape_raster, WUSTL_FOLDER=WUSTL_FOLDER, counties=counties)
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
month
month <- 5
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
year <- 2015 # Year to run analysis for
months <- 1:12 # Months to run analysis for
month <- 5
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
# Set locations to data and check that paths exits
WUSTL_FOLDER <- paste("data/SOIL", as.character(year), sep="/") %>% check_path # Path to WUSTL data
# Set locations to data and check that paths exits
WUSTL_FOLDER <- paste("data/SOIL", as.character(year), sep="/") %>% check_path # Path to WUSTL data
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
as.Date("%Y-%m-%d")
wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER,
year=as.character(year),
month=format(date,"%m"),
geom=counties)
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
paste0(OUTPUT_DIR,"/", year, "/", format(date, "%Y%m"),".csv")
year
type(year)
typeof(year)
source('~/code/dust_landuse_analysis/dust_analysis.R')
paste0(OUTPUT_DIR,"/", as.character(year), "/", format(date, "%Y%m"),".csv")
stopCluster(cl)
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
OUTPUT_DIR <- paste("data/results", as.character(year), sep="/")
# Create output directory
dir.create(OUTPUT_DIR, showWarnings=FALSE)
OUTPUT_DIR <- check_path(OUTPUT_DIR) # Check that path exists
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
# Dependencies
source("utils.R") # For checking that path exists
# User inputs
year <- 2016 # Year of interest as integer value
month <- 3 # Month of interest as integer value (i.e 3 for March)
# Get date from year month and get filepath
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon
as.Date("%Y-%m-%d")
# Get date from year month and get filepath
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon
as.Date("%Y-%m-%d")
DATA_DIR <- paste("data/results/", as.character(year), sep="/")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv") %>% check_path # Define filepath and check that it exists
DATA_DIR <- paste("data/results", as.character(year), sep="/")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv") %>% check_path # Define filepath and check that it exists
# Get date from year month and get filepath
date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon
as.Date("%Y-%m-%d")
DATA_DIR <- paste("data/results", as.character(year), "/", sep="/")
FILEPATH <- paste0(DATA_DIR,format(date,"%Y%m"),".csv") %>% check_path # Define filepath and check that it exists
# Read in dataframe
df <- read_csv(FILEPATH)
library(tidyverse)
library(ncdf4)
library(raster)
library(sf)
library(lubridate)
library(exactextractr)
library(plyr)
library(dplyr)
library(parallel)
source("utils.R") # Helper functions
args <- commandArgs(trailingOnly = TRUE)
print(args)
length(year)
year
year <- commandArgs(trailingOnly = TRUE)
length(year)
year <- commandArgs(trailingOnly = TRUE) # Input year from BASH file (see Rscript.txt)
if (length(year) == 0) {
year <- 2015 # Default year for running interactively in RStudio
}
months <- 1:12 # Months to run analysis for
year
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
source('~/code/dust_landuse_analysis/dust_analysis.R')
