
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.2     v purrr   0.3.4
v tibble  3.0.4     v dplyr   1.0.2
v tidyr   1.1.2     v stringr 1.4.0
v readr   1.4.0     v forcats 0.5.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
> library(ncdf4)
> library(raster)  
Loading required package: sp

Attaching package: 'raster'

The following object is masked from 'package:dplyr':

    select

> library(sf)      
Linking to GEOS 3.6.2, GDAL 2.2.3, PROJ 4.9.3; sf_use_s2() is TRUE
> library(lubridate)

Attaching package: 'lubridate'

The following objects are masked from 'package:raster':

    intersect, union

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

> library(exactextractr)
> library(plyr)
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: 'plyr'

The following objects are masked from 'package:dplyr':

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following object is masked from 'package:purrr':

    compact

> library(dplyr)
> library(parallel)
> source("utils.R")
> 
> 
> # Set locations to data 
> WUSTL_FOLDER <- "data/SOIL" # Path to WUSTL data 
> CROPSCAPE_FOLDER <- "data/cropscape" # Path to folder containing cropscape rasters 
> SHAPEFILE_PATH <- "data/CA_Counties" # Path to counties shapefile
> OUTPUT_DIR <- "data/results"
> year <- 2016 # Year to run analysis for 
> months <- 1:12 # Months to run analysis for 
> 
> # Create outfile for storing info about code 
> outfile <- "log.txt"
> unlink(outfile) # Remove file if it already exists 
> cat("Created outfile", outfile, file = "log.txt", append = TRUE)
> 
> # Check that paths exist 
> dir.create(OUTPUT_DIR, showWarnings=FALSE)
> lapply(c(WUSTL_FOLDER, CROPSCAPE_FOLDER, SHAPEFILE_PATH, OUTPUT_DIR), check_path)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

> 
> # Loop through each year and perform analysis 
> cat("\nStarting analysis for", year,"...", file = "log.txt", append = TRUE)
> start.time = Sys.time()
> 
> # Read in cropscape raster & shapefile 
> cat("\nReading in cropscape raster & central valley shapefile (time invariant)...", file = "log.txt", append = TRUE)
> counties <- read_centralValley(SHAPEFILE_PATH) # Read in shapefile of Central Valley counties of interest 
> cropscape_raster <- read_cropscape(CROPSCAPE_FOLDER=CROPSCAPE_FOLDER, # Read in CropScape raster
+                                    year=as.character(year), 
+                                    geom=counties)
> cat("complete.\n", file = "log.txt", append = TRUE)
> 
> 
> # ------------------ Make cluster & run analysis ------------------
> 
> ncores <- as.numeric(Sys.getenv('SLURM_CPUS_ON_NODE'))
> if (is.na(ncores)) { ncores <- 4 }
> cl <- makeCluster(ncores, outfile=outfile)
> cat("\nMade cluster with", ncores,"cores.", file = "log.txt", append = TRUE)
> 
> # Load desired packages into each cluster
> invisible(clusterEvalQ(cl, c(library(ncdf4),
+                    library(tidyverse),
+                    library(raster), 
+                    library(sf),      
+                    library(lubridate),
+                    library(exactextractr),
+                    library(plyr), 
+                    library(dplyr), 
+                    source("utils.R"))))
> 
> clusterExport(cl=cl, varlist=c("WUSTL_FOLDER","counties", "OUTPUT_DIR","cropscape_raster"), envir=environment())
> 
> parSapply(cl, months, FUN=function(month, year, cropscape_raster, WUSTL_FOLDER, counties) { 
+   
+   start.time.month = Sys.time()
+   date <- paste0(as.character(year),"-", as.character(month),"-01") %>%  # Get year-mon of analysis as date
+     as.Date("%Y-%m-%d")
+   cat("\n", format(date,"%B %Y"),": Starting analysis...")
+   
+   # ------------------ Read in WUSTL raster ------------------
+   cat("\n", format(date,"%B %Y"),": Reading in WUSTL raster...")
+   wustl_raster <- read_wustl(WUSTL_FOLDER=WUSTL_FOLDER, 
+                              year=as.character(year), 
+                              month=format(date,"%m"), 
+                              geom=counties)
+   cat("complete.")
+   
+   # ------------------ Perform pixel analysis on WUSTL raster ------------------
+   # Convert raster to data frame of points and determine which county each point (pixel) is in 
+   cat("\n", format(date,"%B %Y"),": Converting WUSTL raster to points & determining county of each point...")
+   wustl_results <- wuslt_raster_analysis(wustl_raster=wustl_raster, counties=counties)
+   cat("complete.")
+   
+   # ------------------ Perform land type analysis ------------------
+   # Pixel ID is assigned by looping through each polygon 
+   # See the function cov_frac_df for more details on the code 
+   cat("\n", format(date,"%B %Y"),": Computing fraction land use type in each WUSTL pixel...")
+   crop_results <- crop_extraction_wustl_polys(wustl_raster=wustl_raster, cropscape_raster=cropscape_raster)
+   cat("complete.")
+   
+   # ------------------ Combine results and save as csv file ------------------
+   
+   # Combine results 
+   cat("\n", format(date,"%B %Y"),": Combining WUSTL and cropscape analyses...")
+   results_all <- left_join(wustl_results, crop_results, on=c("pixel_ID","SOIL")) %>% 
+     dplyr::rename("dust(ug/m3)" = SOIL) # Rename column
+   
+   # Save data frame as csv 
+   output_filepath = paste0(OUTPUT_DIR,"/",format(date, "%Y%m"),".csv")
+   cat("\n", format(date,"%B %Y"),": Saving results as a csv file to ", output_filepath, "...")
+   write.csv(results_all, output_filepath, row.names=FALSE)
+   
+   cat("\n", format(date,"%B %Y"),": COMPLETED ANALYSIS. Total time elapsed:", time_elapsed_pretty(start.time.month, Sys.time()), "\n")
+   
+ }, year=year, cropscape_raster=cropscape_raster, WUSTL_FOLDER=WUSTL_FOLDER, counties=counties)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

> 
> cat("Completed analysis for", year, "\nTotal time elapsed:", time_elapsed_pretty(start.time, Sys.time()))
Completed analysis for 2016 
Total time elapsed: 00:31:30> stopCluster(cl)
> 
> proc.time()
    user   system  elapsed 
  42.200    7.712 1897.256 
